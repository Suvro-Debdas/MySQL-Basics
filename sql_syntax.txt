SQL Constrains :

Not Null
Default
Unique
Primary
check 
Foreign Key

- To create any             CREATE DATABASE database_name;
  database

- To use any                Use database_name;
  database

- To know 
  structure of 
  any table                 Describe table_name;

- To know 
  the character
  length                    SELECT char_length(column 1) FROM table WHERE column 1 = 'something';

-To drop
 any database               DROP DATABASE databasename;

-To drop
 any table                  DROP TABLE tablename;
        
       - Create index       Create index index_name on table_name (column 1,column 2);
index  - Remove index       Drop index index_name on table_name;
       - Show index         Show index from table_name;

                Type of Index

Clustered Index -           A clustered index is an index which defines the physical order in which table records are stored in a database and there can be only one clustered index per table. By default a clustered index is created on the primary key column.
          
Non Clustered Index -       A nonclustered index is an index structure which separates from the data stored in a table that reorders one or more selected columns.Multiple nonclustered indexes on a table can be created.

               Data Defination Language

CREATE-                   CREATE TABLE Bank_Details (
Example - 1	          Product varchar (100) UNIQUE,
	                  Quantity int (100) NOT NULL,
	                  Price REAL (100)  NOT NULL,
	                  Purchase_Cost decimal (6,2)  NOT NULL,
                          Estimated_Sale_Cost float (20)  NOT NULL,
	                  PRIMARY KEY (Product)
                    	  );                                                  # Adding Foreign Key to an exsisting table -- Example:1                                                                                                                                              
CREATE                   CREATE TABLE Employee_Details (                      |ALTER TABLE employee_details                               
Example - 2		 Emp_Id int (10) PRIMARY KEY,                         |ADD FOREIGN KEY (Branch_Id)                           
			 First_Name varchar (50) NOT NULL,                    |REFERENCES branch_details(Branch_Id)                     
			 Last_Name varchar (50) NOT NULL,                     |ON DELETE SET NULL;                                                                     
			 DOB date  NOT NULL,                          
    			 Sex varchar(1)  NOT NULL,                           # Adding Foreign Key to an exsisting table -- Example:2
			 Salary int (20)  NOT NULL,                           |ALTER TABLE employee_details
    			 Supervisor_Id int (10)  NOT NULL,                    |ADD FOREIGN KEY (Supervisor_Id)      
    			 Branch_Id int (10)  NOT NULL                         |REFERENCES employee_details(Emp_Id)      
		         );                                                   |ON DELETE SET NULL;       
                                                                           
CREATE                  CREATE TABLE Branch_Details (
Example - 3	        Branch_Id int (5) PRIMARY KEY,
FOREIGN KEY	        Branch_Name varchar (40) NOT NULL,
	                Manager_Id int (10),
	                Manager_joining date  NOT NULL,
                        FOREIGN KEY(Manager_Id) REFERENCES employee_details (Emp_Id) ON DELETE SET NULL
                        );

CREATE                CREATE TABLE works_with (
Example - 4	      Emp_Id int (10),
	              Client_Id int (15) NOT NULL,
	              Total_sales int (100),
                      PRIMARY KEY(Emp_Id,Client_Id),
                      FOREIGN KEY(Emp_Id) REFERENCES employee_details (Emp_Id) ON DELETE CASCADE,
                      FOREIGN KEY(Client_Id) REFERENCES client_details (Client_Id) ON DELETE CASCADE
                      );


      -add column      ALTER TABLE table_one ADD COLUMN Quantity int (20) NOT null;
Alter-rename column    ALTER TABLE employees CHANGE contact CONTACT_NO VARCHAR(50); 
      -truncate	       Truncate table table_name;


              Data control Language

grnat	               GRANT <privilege list> ON <Relation Name> To <User>
revoke		       REVOKE <privilege list> ON <Relation Name> To <User>


              Transaction control Language

commit
rollback
savepoint

             Data Manipulation Language

insert                     INSERT INTO coaching_centre (Serial_Number,Student_Name,Student_Id,Department,Batch_Id,location,degree_type) VALUES                            (Serial_Number,'Student_Name','Student_Id','Department','Batch_Id','location','degree_type');
update                     UPDATE coaching_centre set degree_type = 'b.Tech' WHERE Student_Id = 301;
delete                     DELETE FROM `table_two` WHERE emp_id in (11,12,13,14,15);

             SQL Opeators

Where                      SELECT * FROM `coaching_centre` WHERE student_id = 300;

             SQL Logical Opeators

and		           SELECT * FROM `coaching_centre` WHERE Department = 'Civil Engineering' and Student_Id = '100';
or			   SELECT * FROM `coaching_centre` WHERE Department = 'Civil Engineering' OR Student_Id = '300';
not			   SELECT * FROM `coaching_centre` WHERE Department = 'Civil Engineering' AND Student_Id != '300';

             SQL Comparison Opeators

=		           SELECT * FROM `coaching_centre` WHERE Department = 'Civil Engineering' AND Student_Id = '100';
>			   SELECT * FROM `coaching_centre` WHERE Department = 'Civil Engineering' AND Student_Id > '100';
>=			   SELECT * FROM `coaching_centre` WHERE Department = 'Civil Engineering' AND Student_Id >='100';
<			   SELECT * FROM `coaching_centre` WHERE Department = 'Civil Engineering' AND Student_Id < '100';
<=                         SELECT * FROM `coaching_centre` WHERE Department = 'Civil Engineering' AND Student_Id <= '100';
! or <>                    SELECT * FROM `coaching_centre` WHERE Department = 'Civil Engineering' AND Student_Id <> '300';

             SQL Special Opeators

Between		           SELECT * FROM `coaching_centre` WHERE salary BETWEEN 10000 and 20000;
Like			   SELECT * FROM `coaching_centre` WHERE salary first_name like 'Ram';
Is Null			   SELECT * FROM `coaching_centre` WHERE salary is null;
In			   SELECT * FROM `coaching_centre` WHERE salary IN (10000,20000);
Distinct                   SELECT DISTINCT ( first_name) from employees;

             SQL Aggregations Opeators

Avg()		           SELECT avg (salary) FROM employees;
Count()			   SELECT count(*) FROM employees;
Max()			   SELECT min (salary) FROM employees;
Min()			   SELECT max (salary) FROM employees;
Sum()                      SELECT sum (salary) FROM employees;
FIRST() 
LAST()                                      

              SQL Group By Clause

Group By                  SELECT MAX (salary) department_Id FROM employees GROUP BY department_Id;

	            SQL Having Clause

Having                    SELECT AVG (salary) department_Id FROM employees GROUP BY department_Id HAVING COUNT(department)>=2;

	            SQL Order By Clause

Order By                  SELECT * FROM employees ORDER BY salary DESC;

              SQL Union Opeators

Union                     SELECT product_name FROM products UNION SELECT product_name FROM new_products;       (Does't allow replication).

Union All                 SELECT product_name FROM products UNION ALL SELECT product_name FROM new_products;   (Allows replication).

              SQL Joins 
                
                          SELECT table_one.player_id,table_one.player_name,table_one.runs_made,table_one.charisma,
                          table_two.player_id,table_two.player_name,table_two.runs_made,table_two.popularity 
Inner Join                FROM table_one INNER JOIN table_two
                          ON table_one.player_id=table_two.player_id;

                          SELECT table_one.player_id,table_one.player_name,table_one.runs_made,table_one.charisma,
                          table_two.player_id,table_two.player_name,table_two.runs_made,table_two.popularity 
Left Outer Join           FROM table_one LEFT OUTER JOIN table_two ON                          
                          table_one.player_name=table_two.player_name;

                          ELECT table_one.player_id,table_one.player_name,table_one.runs_made,table_one.charisma,
                          table_two.player_id,table_two.player_name,table_two.runs_made,table_two.popularity 
Right Outer Join          FROM table_one Right OUTER JOIN table_two ON                          
                          table_one.player_name=table_two.player_name;

self Join-                SELECT A.serial_number AS Serialnumber1, B.Product_id AS Productid2, A.Product_name FROM products A, 
                          products B WHERE A.Product_name <> B.Product_name ORDER BY A.Product_id;

Cross Join                SELECT * FROM table_one CROSS JOIN table_two;

SQL Error Handeling       BEGIN TRY 
			  SELECT 1/0;
			  END try
			  BEGIN catch
			  SELECT 
			  	@@ERROR AS ERROR,
  				ERROR_NUMBER() AS ERROR_NUMBER,
  				ERROR_SEVERITY() AS ERROR_SEVERITY,
    			        ERROR_STATE() AS ERROR_STATE,
    				ERROR_PROCEDURE() AS ERROR_PROCEDURE,
    				ERROR_LINE() AS ERROR_LINE,
    				ERROR_MESSAGE() AS ERROR_MESSAGE;
			  END CATCH;

                         SELECT first_name,last_name,salary,rank() over (ORDER BY salary DESC) as rnk FROM employees;
SQL Rank                       
                         SELECT first_name,last_name,salary,rank() over (ORDER BY salary ASC) as rnk FROM employees;

                         SELECT first_name,last_name,salary,dense_rank() over (ORDER BY salary DESC) as rnk FROM employees;
SQL Dense Rank           
                         SELECT first_name,last_name,salary,dense_rank() over (ORDER BY salary ASC) as rnk FROM employees;

Examples of Sub Query    SELECT Player_name,Popularity FROM cricket_two WHERE Popularity > (SELECT AVG(Popularity) FROM cricket_two);
                         SELECT Player_name,Player_id FROM cricket_one WHERE cricket_one.Player_id IN (SELECT Player_id FROM cricket_two);
                         SELECT Player_name,Runs_made FROM cricket_one WHERE Runs_made > (SELECT AVG(Runs_made) FROM cricket_one);

       Detail examples of like/not like operator (Wildcart characters)

SELECT * FROM table_one WHERE player_name LIKE "S%";       (Name starts with S)
SELECT * FROM table_one WHERE player_name LIKE "%S";       (Name ends with S)
SELECT * FROM table_one WHERE player_name LIKE "%CH%";     (CH present in any position)
SELECT * FROM table_one WHERE player_name LIKE "S%S";      (Name starts with S and ends with S)
SELECT * FROM table_one WHERE player_name LIKE "_S%";      (S is in the second position)
SELECT * FROM table_one WHERE player_name LIKE "__S%";     (S is in the third position)
SELECT * FROM table_one WHERE player_name LIKE "S_V%";     (S is in the first position and V is in the third position)
SELECT * FROM table_one WHERE player_name LIKE "_AM%";     (A is in the second position and M is in the third position)
SELECT * FROM table_one WHERE player_name LIKE "_OY";      (O is in the second position and Y is in the third position)